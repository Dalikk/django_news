from news.models import News

News.objects.all()
Метод all() возвращает все записи в бд

//Добавление записи в бд чере shell
News.objects.create(title='News 5', content='News 6 content')

//Метод возвращающий строковое представление объекта
def __str__(self):
	return self.title //возвращаем аргумент title

//Выборка
...objects.filter(title='News 5')
...objects.get(pk=5) //select по primary key, получать по уникальному полю

//Изменение 
news4 = News.objects.get(pk=4)
news4.title = 'Новооость 4'
news4.save()

//Удаление
News.objects.get(pk=7).delete()

//Сортировка
News.objects.order_by('title')
News.objects.order_by('-title') //обратный порядок

//Exclude
News.objects.exclude(title='News 5') //выведет все записи кроме title='News 5'

//Админка
python manage.py createsuperuser //создание супера

//
Field.db_index
Если True, для этого поля будет создан индекс базы данных.

 def __str__(self):		  // строковое представление объекта
        return self.title //

Декораторы

//Статические файлы
python manage.py collectstatic //собирает всю статику с приложений и скопирует по указанному адресу

//Сохранение в БД
** - распаковка словаря в другой словарь  

slug - строка, которая может быть использована в URL

//Подключение MySQL
Для подключения надо установить драйвер - пакет mysqlclient
После подключения необходимо выполнить миграцию (migrate)

//Django ORM.
Документация: https://django.fun/docs/django/ru/3.1/ref/models/querysets/
Примеры:
Выполняем команды через shell (запускается "python manage.py shell")
Импортируем модели
>>> from news.model import News, Category
>>> News.objects.all() - получаем все записи
>>> News.objects.order_by('pk') - получаем записи сортированные по первичному ключу
>>> News.objects.get(title='News 5')
<News: News 5>
>>> news5 = _
>>> news5.is_published - теперь можем обратиться к любому атрибуту модели по переменной news5
True
>>> news5.category - вернет объект Category, т.к. это связанное поле
<Category: Наука>
>>> Category.objects.get(pk=2)
>>> cat2 = _
>>> cat2.news_set.all() - получаем все объекты связанной модели news которые ссылаются на cat4
<QuerySet [<News: Новость из формы 9>, <News: Новость из формы 8>, <News: Новость из формы 7>, <News: Новость из формы 2>, <News: Новость из формы>, <News: Новость 3>]>
- атрибут _set можно переназначить указав в модели его наименование в атрибуте related_name, например:
    category = models.ForeignKey("Category", on_delete=models.PROTECT, verbose_name="Категория", related_name='get_news')
>>> cat2.get_news.all() - теперь можно писать так
<QuerySet [<News: Новость из формы 9>, <News: Новость из формы 8>, <News: Новость из формы 7>, <News: Новость из формы 2>, <News: Новость из формы>, <News: Новость 3>]>

ФИЛЬТРЫ ПОЛЕЙ
https://django.fun/docs/django/ru/3.1/ref/models/querysets/#field-lookups
Синтаксис фильтра полей <имя поля>__<фильтр>
Примеры:
>>> News.objects.filter(pk__gt=12) - вернет QuerySet из объектов, у которых pk > 12

МЕТОДЫ, КОТОРЫЕ НЕ ВОЗВРАЩАЮТ QuerySet
Примеры:
>>> News.objects.first()
<News: Новость из формы 9>
>>> News.objects.order_by('pk').first() - возравщает первую
<News: Новость 1>
>>> cat1.news_set.filter(pk__gt=1).first() - можно применять с другими методами
<News: Новость из админки>

В filter в качестве аргумента можно передавать QuerySet, например:
>>> cats = Category.objects.filter(pk__in=[1, 3])
>>> cats
<QuerySet [<Category: Культура>, <Category: Политика>]>
>>> News.objects.filter(category__in=cats) - выведет все записи с категориями 'cats'
<QuerySet [<News: Новость из формы 6>, <News: Новость из формы 5>, <News: Новость из формы 4>, <News: Новость из формы 3>, <News: Новость из админки>, <News: Новость 4>, <News: Новость
 2>, <News: Новость 1>]>

Проверяем есть ли записи с такими категориями
>>> cat1 = Category.objects.get(pk=1)
>>> cat5 = Category.objects.get(pk=5)
>>> cat1.news_set.exists()
True
>>> cat5.news_set.exists()
False

Получить предыдущую запись (записывается get_previous_by_<имя поля>)
>>> news = News.objects.get(pk=5)
>>> news.get_previous_by_created_at() - по 'created_at'
<News: Новость 4>

Также можно комбинировать с фильтрами
>>> news.get_next_by_created_at(pk__gt=10, title__contains=7)
<News: Новость из формы 7>

